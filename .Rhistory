accuracy(frcst1, JKL.ts_Room_Revenue_test)
lam <- BoxCox.lambda(JKL.ts_Room_Revenue)
fit1 <- ets(JKL.ts_Room_Revenue, lambda = lam)
frcst1 <-  forecast(fit1, h = 5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "A,A,N")
frcst1 <- forecast.ets(fit1, h =6)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AAN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
frcst1 <- forecast.ets(fit1, h =12)
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (12 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", col = "red")
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AMN")
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AMM")
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AAA")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "ANN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AAN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
frcst1 <- forecast.ets(fit1, h =12)
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (12 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", col = "red")
lam <- BoxCox.lambda(JKL.ts_Room_Revenue)
fit1 <- ets(JKL.ts_Room_Revenue, lambda = lam)
frcst1 <-  forecast(fit1, h = 5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
plot(frcst1)
fit1 <- ets(JKL.ts_Room_Revenue)
frcst1 <- forecast.ets(fit1, h = 5)
plot(frcst1)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "MNN")
lam <- BoxCox.lambda(JKL.ts_Room_Revenue)
fit1 <- ets(JKL.ts_Room_Revenue, lambda = lam)
frcst1 <-  forecast(fit1, h = 5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
plot(frcst1)
fit1 <- auto.arima(JKL.ts_Room_Revenue)
frcst1 <- forecast(fit1, h =5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
plot(frcst1)
lam <- BoxCox.lambda(JKL.ts_Room_Revenue)
fit1 <- ets(JKL.ts_Room_Revenue, lambda = lam)
frcst1 <-  forecast(fit1, h = 5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
plot(frcst1)
fit1 <- ets(JKL.ts_Room_Revenue)
frcst1 <- forecast.ets(fit1, h = 5)
plot(frcst1)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
#Import Data
Final_Forecast_set.ABC <- subset(Final_Forecast_set, Account_Name == "ABC")
Final_Forecast_set.JKL <- subset(Final_Forecast_set, Account_Name == "JKL")
Final_Forecast_set.XYZ <- subset(Final_Forecast_set, Account_Name == "XYZ")
## convert dates into a readable format
Final_Forecast_set.ABC$Check_In_Date <- as.Date.character(Final_Forecast_set.ABC$Check_In_Date, format = "%Y%m%d")
Final_Forecast_set.ABC$Check_Out_Date <- as.Date.character(Final_Forecast_set.ABC$Check_Out_Date, "%Y%m%d")
Final_Forecast_set.JKL$Check_In_Date <- as.Date.character(Final_Forecast_set.JKL$Check_In_Date, "%Y%m%d")
Final_Forecast_set.JKL$Check_Out_Date <- as.Date.character(Final_Forecast_set.JKL$Check_Out_Date, "%Y%m%d")
Final_Forecast_set.XYZ$Check_In_Date <- as.Date.character(Final_Forecast_set.XYZ$Check_In_Date, "%Y%m%d")
Final_Forecast_set.XYZ$Check_Out_Date <- as.Date.character(Final_Forecast_set.XYZ$Check_Out_Date, "%Y%m%d")
## sort data by date and remove values from 2011##
#format(Final_Forecast_set.ABC$Check_In_Date, "%Y%m")
Final_Forecast_set.ABC <- Final_Forecast_set.ABC[order(Final_Forecast_set.ABC$Check_In_Date),]
Final_Forecast_set.JKL <- Final_Forecast_set.JKL[order(Final_Forecast_set.JKL$Check_In_Date),]
Final_Forecast_set.XYZ <- Final_Forecast_set.XYZ[order(Final_Forecast_set.XYZ$Check_In_Date),]
Final_Forecast_set.ABC <- subset(Final_Forecast_set.ABC, as.numeric(format(Final_Forecast_set.ABC$Check_In_Date, "%Y")) > "2011")
Final_Forecast_set.JKL <- subset(Final_Forecast_set.JKL, as.numeric(format(Final_Forecast_set.JKL$Check_In_Date, "%Y")) > "2011")
Final_Forecast_set.XYZ <- subset(Final_Forecast_set.XYZ, as.numeric(format(Final_Forecast_set.XYZ$Check_In_Date, "%Y")) > "2011")
Final_Forecast_set.ABC$Posix_Date <- format.Date((Final_Forecast_set.ABC$Check_In_Date),"%Y%m")
Final_Forecast_set.JKL$Posix_Date <- format.Date((Final_Forecast_set.JKL$Check_In_Date),"%Y%m")
Final_Forecast_set.XYZ$Posix_Date <- format.Date((Final_Forecast_set.XYZ$Check_In_Date),"%Y%m")
## Save Original data to run time forecast model on
ABC_Room_Revenue_ORG <- aggregate.data.frame(Final_Forecast_set.ABC['Room_Revenue_USD'],list(Final_Forecast_set.ABC$Posix_Date), FUN = mean )
ABC_Room_Revenue_ORG <- ts(ABC_Room_Revenue_ORG$Room_Revenue_USD, start = c(2012,01), frequency = 12)
ABC_Room_Nights_ORG <- aggregate.data.frame(Final_Forecast_set.ABC['Room_Nights'],list(Final_Forecast_set.ABC$Posix_Date), FUN = mean )
ABC_Room_Nights_ORG <- ts(ABC_Room_Nights_ORG$Room_Nights, start = c(2012,01), frequency = 12)
JKL_Room_Revenue_ORG <- aggregate.data.frame(Final_Forecast_set.JKL['Room_Revenue_USD'],list(Final_Forecast_set.JKL$Posix_Date), FUN = mean )
JKL_Room_Revenue_ORG <- ts(JKL_Room_Revenue_ORG$Room_Revenue_USD, start = c(2012,01), frequency = 12)
JKL_Room_Nights_ORG <- aggregate.data.frame(Final_Forecast_set.JKL['Room_Nights'],list(Final_Forecast_set.JKL$Posix_Date), FUN = mean )
JKL_Room_Nights_ORG <- ts(JKL_Room_Nights_ORG$Room_Nights, start = c(2012,01), frequency = 12)
XYZ_Room_Revenue_ORG <- aggregate.data.frame(Final_Forecast_set.XYZ['Room_Revenue_USD'],list(Final_Forecast_set.XYZ$Posix_Date), FUN = mean )
XYZ_Room_Revenue_ORG <- ts(XYZ_Room_Revenue_ORG$Room_Revenue_USD, start = c(2012,01), frequency = 12)
XYZ_Room_Nights_ORG <- aggregate.data.frame(Final_Forecast_set.XYZ['Room_Nights'],list(Final_Forecast_set.XYZ$Posix_Date), FUN = mean )
XYZ_Room_Nights_ORG <- ts(XYZ_Room_Nights_ORG$Room_Nights, start = c(2012,01), frequency = 12)
#Final_Forecast_set.ABC$Posix_Date <- format.Date((Final_Forecast_set.ABC$Check_In_Date),"%Y%m")
#create a test obj of values > 2015 to test forecast
Final_Forecast_set.ABC_test <- subset(Final_Forecast_set.ABC, as.numeric(format(Final_Forecast_set.ABC$Check_In_Date, "%Y")) == "2015")
Final_Forecast_set.JKL_test <- subset(Final_Forecast_set.JKL, as.numeric(format(Final_Forecast_set.JKL$Check_In_Date, "%Y")) == "2015")
Final_Forecast_set.XYZ_test <- subset(Final_Forecast_set.XYZ, as.numeric(format(Final_Forecast_set.XYZ$Check_In_Date, "%Y")) == "2015")
Final_Forecast_set.ABC <- subset(Final_Forecast_set.ABC, as.numeric(format(Final_Forecast_set.ABC$Check_In_Date, "%Y")) > "2011" & as.numeric(format(Final_Forecast_set.ABC$Check_In_Date, "%Y")) < "2015")
Final_Forecast_set.JKL <- subset(Final_Forecast_set.JKL, as.numeric(format(Final_Forecast_set.JKL$Check_In_Date, "%Y")) > "2011" & as.numeric(format(Final_Forecast_set.JKL$Check_In_Date, "%Y")) < "2015")
Final_Forecast_set.XYZ <- subset(Final_Forecast_set.XYZ, as.numeric(format(Final_Forecast_set.XYZ$Check_In_Date, "%Y")) > "2011" & as.numeric(format(Final_Forecast_set.XYZ$Check_In_Date, "%Y")) < "2015")
#sapply(Final_Forecast_set.ABC$Check_In_Date,)
#which(apply(Final_Forecast_set.ABC$Check_In_Date,2,function(x) any(grepl("a",x))))
#Final_Forecast_set.ABC <- subset(Final_Forecast_set.ABC,format(Final_Forecast_set.ABC$Check_In_Date, "%Y%m") != "201109")
#|| format(Final_Forecast_set.ABC$Check_In_Date, "%Y%m") != "201110" || format(Final_Forecast_set.ABC$Check_In_Date, "%Y%m") != "201111" )
#
#Final_Forecast_set.ABC <- subset(Final_Forecast_set.ABC,format(Final_Forecast_set.ABC$Check_In_Date, "%Y") != "2011")
#
#Final_Forecast_set.ABC <- subset(Final_Forecast_set.ABC,format(Final_Forecast_set.ABC$Check_In_Date, "%Y") != "2011")
## Aggregate the data and convert to Time Series ##
# ABC
Final_Forecast_set.ABC$Posix_Date <- format.Date((Final_Forecast_set.ABC$Check_In_Date),"%Y%m")
ABC.agg <- aggregate.data.frame(Final_Forecast_set.ABC['Room_Revenue_USD'],list(Final_Forecast_set.ABC$Posix_Date), FUN = mean )
ABC.ts_Room_Revenue <- ts(ABC.agg$Room_Revenue_USD, start = c(2012,01), frequency = 12)
ABC.agg <- aggregate.data.frame(Final_Forecast_set.ABC['Room_Nights'],list(Final_Forecast_set.ABC$Posix_Date), FUN = mean )
ABC.ts_Room_Nights <- ts(ABC.agg$Room_Nights, start = c(2012,01), frequency = 12)
plot(ABC.ts_Room_Nights)
##ABC Test
Final_Forecast_set.ABC_test$Posix_Date <- format.Date((Final_Forecast_set.ABC_test$Check_In_Date),"%Y%m")
ABC.agg <- aggregate.data.frame(Final_Forecast_set.ABC_test['Room_Revenue_USD'],list(Final_Forecast_set.ABC_test$Posix_Date), FUN = mean )
ABC.ts_Room_Revenue_test <- ts(ABC.agg$Room_Revenue_USD, start = c(2015,01), frequency = 12)
ABC.agg <- aggregate.data.frame(Final_Forecast_set.ABC_test['Room_Nights'],list(Final_Forecast_set.ABC_test$Posix_Date), FUN = mean )
ABC.ts_Room_Nights_test <- ts(ABC.agg$Room_Nights, start = c(2015,01), frequency = 12)
plot(ABC.ts_Room_Revenue_test)
#JKL
Final_Forecast_set.JKL$Posix_Date <- format.Date((Final_Forecast_set.JKL$Check_In_Date),"%Y%m")
JKL.agg <- aggregate.data.frame(Final_Forecast_set.JKL['Room_Revenue_USD'],list(Final_Forecast_set.JKL$Posix_Date), FUN = mean )
JKL.ts_Room_Revenue <- ts(JKL.agg$Room_Revenue_USD, start = c(2012,01), frequency = 12)
JKL.agg <- aggregate.data.frame(Final_Forecast_set.JKL['Room_Nights'],list(Final_Forecast_set.JKL$Posix_Date), FUN = mean )
JKL.ts_Room_Nights <- ts(JKL.agg$Room_Nights, start = c(2012,01), frequency = 12)
plot(JKL.ts_Room_Nights)
#JKL Test
Final_Forecast_set.JKL_test$Posix_Date <- format.Date((Final_Forecast_set.JKL_test$Check_In_Date),"%Y%m")
JKL.agg <- aggregate.data.frame(Final_Forecast_set.JKL_test['Room_Revenue_USD'],list(Final_Forecast_set.JKL_test$Posix_Date), FUN = mean )
JKL.ts_Room_Revenue_test <- ts(JKL.agg$Room_Revenue_USD, start = c(2015,01), frequency = 12)
JKL.agg <- aggregate.data.frame(Final_Forecast_set.JKL_test['Room_Nights'],list(Final_Forecast_set.JKL_test$Posix_Date), FUN = mean )
JKL.ts_Room_Nights_test <- ts(JKL.agg$Room_Nights, start = c(2015,01), frequency = 12)
plot(JKL.ts_Room_Revenue_test)
# XYZ
Final_Forecast_set.XYZ$Posix_Date <- format.Date((Final_Forecast_set.XYZ$Check_In_Date),"%Y%m")
XYZ.agg <- aggregate.data.frame(Final_Forecast_set.XYZ['Room_Revenue_USD'],list(Final_Forecast_set.XYZ$Posix_Date), FUN = mean )
XYZ.ts_Room_Revenue <- ts(XYZ.agg$Room_Revenue_USD, start = c(2012,01), frequency = 12)
XYZ.agg <- aggregate.data.frame(Final_Forecast_set.XYZ['Room_Nights'],list(Final_Forecast_set.XYZ$Posix_Date), FUN = mean )
XYZ.ts_Room_Nights <- ts(XYZ.agg$Room_Nights, start = c(2012,01), frequency = 12)
plot(XYZ.ts_Room_Nights)
## XYZ
Final_Forecast_set.XYZ_test$Posix_Date <- format.Date((Final_Forecast_set.XYZ_test$Check_In_Date),"%Y%m")
XYZ.agg <- aggregate.data.frame(Final_Forecast_set.XYZ_test['Room_Revenue_USD'],list(Final_Forecast_set.XYZ_test$Posix_Date), FUN = mean )
XYZ.ts_Room_Revenue_test <- ts(XYZ.agg$Room_Revenue_USD, start = c(2015,01), frequency = 12)
XYZ.agg <- aggregate.data.frame(Final_Forecast_set.XYZ_test['Room_Nights'],list(Final_Forecast_set.XYZ_test$Posix_Date), FUN = mean )
XYZ.ts_Room_Nights_test <- ts(XYZ.agg$Room_Nights, start = c(2015,01), frequency = 12)
plot(XYZ.ts_Room_Revenue_test)
frcst1 <- meanf(JKL.ts_Room_Revenue, h =5 )
plot(frcst1)
accuracy(frcst1,JKL.ts_Room_Revenue_test)
frcst1 <- rwf(JKL.ts_Room_Revenue, drift = TRUE, h = 5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
fit1 <- ets(JKL.ts_Room_Revenue)
frcst1 <- forecast.ets(fit1, h = 5)
plot(frcst1)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
fit1 <- auto.arima(JKL.ts_Room_Revenue)
frcst1 <- forecast(fit1, h =5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
plot(frcst1)
lam <- BoxCox.lambda(JKL.ts_Room_Revenue)
fit1 <- ets(JKL.ts_Room_Revenue, lambda = lam)
frcst1 <-  forecast(fit1, h = 5)
accuracy(frcst1, JKL.ts_Room_Revenue_test)
plot(frcst1)
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AAN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "ANN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AAN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
frcst1 <- forecast.ets(fit1, h =12)
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (12 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", col = "red")
View(frcst1)
lam <- BoxCox.lambda(JKL_Room_Revenue_ORG)
fit1 <- ets(JKL_Room_Revenue_ORG, lambda = lam, model = "AAN")
frcst1 <- forecast.ets(fit1, h =6)
fit1
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "1")
frcst1 <- forecast.ets(fit1, h =12)
View(frcst1)
plot(frcst1, main = "JKL - Room Revenue Forecast (12 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", col = "red")
fit1 <- ets(XYZ.ts_Room_Revenue)
frcst1 <- forecast.ets(fit1, h = 5)
accuracy(frcst1, XYZ.ts_Room_Revenue_test)
plot(frcst1)
fit1 <- auto.arima(XYZ.ts_Room_Revenue)
frcst1 <- forecast(fit1, h =5)
accuracy(frcst1, XYZ.ts_Room_Revenue_test)
plot(frcst1)
lam <- BoxCox.lambda(XYZ.ts_Room_Revenue)
fit1 <- ets(XYZ.ts_Room_Revenue, lambda = lam)
frcst1 <-  forecast(fit1, h = 5)
accuracy(frcst1, XYZ.ts_Room_Revenue_test)
plot(frcst1)
fit1 <- ets(XYZ_Room_Revenue_ORG, model = "ANN")
frcst1 <- forecast.ets(fit1, h =6)
View(frcst1)
fit1
plot(frcst1, main = "XYZ - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "green")
fit1 <- ets(XYZ_Room_Revenue_ORG, model = "AAN")
frcst1 <- forecast.ets(fit1, h =6)
View(frcst1)
fit1
plot(frcst1, main = "XYZ - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "green")
fit1 <- ets(XYZ_Room_Revenue_ORG, model = "AMN")
frcst1 <- forecast.ets(fit1, h =6)
View(frcst1)
fit1
plot(frcst1, main = "XYZ - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "green")
fit1 <- ets(XYZ_Room_Revenue_ORG, model = "AMM")
frcst1 <- forecast.ets(fit1, h =6)
View(frcst1)
fit1 <- ets(XYZ_Room_Revenue_ORG, model = "AAA")
frcst1 <- forecast.ets(fit1, h =6)
View(frcst1)
fit1
fit1 <- ets(XYZ_Room_Revenue_ORG, model = "ANN")
frcst1 <- forecast.ets(fit1, h =6)
View(frcst1)
fit1
plot(frcst1, main = "XYZ - Room Revenue Forecast (6 Months)", ylab = "Room Revenue in USD (Mean)" , xlab = " Years ", cex.lab = 1.5, font.lab = 2, cex.main =1, col = "green")
Final_Forecast_set <- read.xlsx("/Users/adityasardesai/Desktop/Final_Forecasting_Data_Daily.xlsx", sheet = "Final Data", colNames = TRUE)
library(openxlsx)
libarary(tools)
library(tools)
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Final_Forecast_set <- read.xlsx("/Users/adityasardesai/Desktop/Final_Forecasting_Data_Daily.xlsx", sheet = "Final Data", colNames = TRUE)
Final_Forecast_set <- read.xlsx("/Users/adityasardesai/Desktop/Final_Forecasting_Data_Daily.xlsx", sheet = "Final Data", colNames = TRUE)
detach("package:xlsx", unload=TRUE)
detach("package:xlsxjars", unload=TRUE)
Final_Forecast_set <- read.xlsx("/Users/adityasardesai/Desktop/Final_Forecasting_Data_Daily.xlsx", sheet = "Final Data", colNames = TRUE)
View(Final_Forecast_set)
install.packages("ggplot2")
lib(ggplot2)
library(ggplot2)
X <- 1
x
x <- 1
x
y <- "msg"
y
x + y
x<-c(4,TRUE)
class(x)
x<-c(1,3,5);y<-c(3,2,10)
rbind(x,y)
x<-1:4;y<-2:3
x+y
u<-x+y
class(u)
x<-1:4;y<-2:3
u<-x+y
class(u)
x<-c(17,14,4,15,9,5)
x[x>10] <- 10
x
x<-c(17,14,4,15,9,5)
x[x>10] == 10
read.csv(/Users/adityasardesai/Downloads)
read.csv(/Users/adityasardesai/Downloads/"hw1_data.csv")
read.csv(Users/adityasardesai/Downloads/"hw1_data.csv")
read.csv("hw1_data.csv")
read.csv(hw1_data.csv)
read.csv(hw1_data.csv)
read.csv("hw1_data.csv")
read.csv(hw1_data)
x <- read.csv(hw1_data.csv)
x <- read.csv("hw1_data.csv")
f <- file.choose()
read.csv(f)
hw1 <- read.csv(f)
hw1[c(1,2)]
c[2,]
hw1[2,]
hw1[3,]
hw1[1:2,]
hw1.count()
hw1.nrows()
hw1.count()
count()
nrws
nrows()
nrow(hw1)
hw1[nrow(hw1)-2,]
hw1[nrow(hw1):nrow(hw1)-1,]
hw1[nrow(hw1):nrow(hw1)-2,]
hw1[152:153,]
hw1$Ozone[[47]]
sum(is.na(hw1$Ozone))
mean(hw1$Ozone,na.rm = T)
y <- hw1$Ozone>31
y<- y$temp>90
y <- hw1[["Ozone">30]][[temp > 90]]
y <- hw1[["Ozone">30]][["temp"" > 90]]
y <- hw1$Ozone>30$Temp>90
y <- hw1$Ozone>30
y <- y$Temp>90
y <- y$Temp>90
z <- hw1[[Ozone>30]][[Temp>90]]
z <- hw1[["Ozone">30]][["Temp">90]]
z
bar <- subset.data.frame(hw1, Ozone > 30 && Temp >90)
bar
hw1
bar <- subset(hw1, Ozone > 30)
bar
bar <- subset(bar, Temp > 90)
bar
mean(bar$Solar.R)
bar <- subset(hw1, Month = 6)
bar
bar <- subset(hw1, Month == 6)
bar
mean(bar$Temp)
bar <- subset(hw1, Month == 5)
bar
max(bar$Ozone)
install("KernSmooth")
install.packge("KernSmooth")
install.packges("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
x <- 1:10
if(x>5){}
if(x>5){x <- 0}
clear
x <- 1:10
if(x > 5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
file.choose()
?dirname()
?dirname()
dir <- folder.choose()
dir <- file.choose()
dir
files <- list.files("/Users/adityasardesai/Desktop/specdata-2")
data.list <- lapply(files, read.csv)
data.list <- lapply(files, read.csv2)
files <- list.files("/Users/adityasardesai/Desktop/specdata-2/")
data.list <- lapply(files,read.csv)
files <- list.files("/Users/adityasardesai/Desktop/specdata-2/")
files
data.list <- lapply(files,read.csv)
?read.csv
data.list <- lapply(files,read.csv)
file.choos
file.choose
filechoose
filechoose()
file.choose()
directory <- file.choose
directory <- file.choose()
clear
clear()
source('~/.active-rstudio-document')
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory)) ## setting the directory
total = 0                            ## the sum of all observed values of pollutant (either sulfate or nitrate)
observations = 0                     ## the total number of observed values of pollutant (either sulfate or nitrate)
#Looping thru the directory's files specified in the 'id' argument
for (i in id)
{
## Due to the format of the filename, i.e 001, 010  instead of 1, 10. I became aware that the following method works but not efficient,
## but at the time of the completion of this assignment, it was the only way I knew how to do it.
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
## depending the poluttant ( sulfate or nitrate), we aggregate the observed values
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
## reset directory path
setwd("..")
## returning the mean of the pollutant values
return (total/observations)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))
}
mean(dat[, pollutant], na.rm = TRUE)
}
library(datasets)
data(iris)
?iris
iris
f <- "virginica"
mean <- tapply(iris,f,mean,true)
f <- "virginica"
mean <- tapply(iris,f,mean)
f <- iris$Species = 'virginica'
f <- iris$Species == 'virginica'
mean(f$Sepal.Length)
mean(f[Sepal.Length])
f
tapply(iris,Species == virignica,mean)
tapply(iris,Species == 'virignica',mean)
f <- split(iris,Species)
f <- split(iris,iris$Species)
tapply(iris,iris$Species,mean)
tapply(iris,f,mean)
n
?apply
?tapply
f <- iris$Species == 'virginica'
mean(f$Sepal.Length)
f
f <- subset(iris,iris$Species == 'virginica')
f
mean(f$Sepal.Length)
round(mean(f$Sepal.Length))
colMeans(iris)
apply(iris,2,mean)
f <- apply(iris,2,mean)
class(f)
is.vector(f)
library(datasets)
data(mtcars)
?mtcars
mtcars
f <- mean(mtcars$mpg,mtcars$cyl)
f
f <- mean(mtcars$mpg,mtcars$cyl)
f <- tapply(mtcars$mpg,mtcars$cyl,mean)
f
f <- sapply(mtcars,cyl,mean)
f <- sapply(split(mtcars$mtcars,mtcars$cyl),mean)
f <- sapply(split(mtcars$mpg,mtcars$cyl),mean)
f
f <- tapply(mtcars$cyl,mtcars$mpg,mean)
f
f <- apply(mtcars,2,mean)
f
f <- with(mtcars,tapply(mpg,cyl,mean))
f
f <- with(mtcars,tapply(hp,cyl,mean))
f
round(abs(f$4-f$8))
abs(f$4-f$8)
c <- f$4-f$8
c <- f[[1]]-f[[3]]
c
abs(c)
round(c)
round(abs(c))
debug(ls)
reset
reset;
clear;
break
break;
?solve
